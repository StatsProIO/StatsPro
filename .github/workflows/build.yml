name: 'Build'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      DOT_ENV:
        required: true
      STACKHERO_DOCKER_CERTIFICATES_PASSWORD:
        required: true
      STACKHERO_DOCKER_HOST:
        required: true
      STACKHERO_DOCKER_SERVICE_ID:
        required: true


jobs:
    build_job:
      name: "Build Job"
      environment: ${{ inputs.environment }}
      runs-on: ubuntu-latest
      steps:
        - name: curl dockerhost
          shell: bash
          run: |
            curl -s ${{ secrets.STACKHERO_DOCKER_HOST }}
        - uses: actions/checkout@v3
        - name: setup dot env
          shell: bash
          run: |
            mv src/.env.example src/.env
            echo '${{ secrets.DOT_ENV }}' >> src/.env
            cat src/.env
        - name: setup dockercompose
          shell: bash
          run: |
            export $(cat src/.env | grep ^APP_HOST | xargs) #get APP_HOST from the .env file
            sed -i "s/APP_HOST/$APP_HOST/g" docker-compose.prod.yml
            cat docker-compose.prod.yml
        - name: view the secrets context
          shell: bash
          run: echo "$SECRETS_CONTEXT"
          env:
            SECRETS_CONTEXT: ${{ toJson(secrets) }}
        - name: Create logical database
          shell: bash
          run: |
            set -x
            export $(cat src/.env | grep ^DB_PASSWORD | xargs) #get from the .env file
            export $(cat src/.env | grep ^DB_HOST | xargs) #get from the .env file
            export $(cat src/.env | grep ^DB_USERNAME | xargs) #get from the .env file
            sudo apt-get update
            sudo apt-get install --yes --no-install-recommends postgresql-client
            echo "SELECT 'CREATE DATABASE marble_metrics' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'marble_metrics')\gexec" | PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USERNAME
        - uses: actions/setup-node@v3
          with:
            node-version: '16.17.0'
            cache: 'npm'
            cache-dependency-path: src/package-lock.json
        - uses: "shivammathur/setup-php@v2"
          with:
            php-version: "8.1.0"
        - name: Install composer dependencies
          uses: ramsey/composer-install@v2
          with:
            working-directory: "src"
        - name: Install node dependencies
          working-directory: ./src
          shell: bash
          run: |
            npm install;
        - name: Build vite
          shell: bash
          run: |
            cd ./src
            ls resources/js/Components
            npm run build
        - name: Deploy
          shell: bash
          run: |
            set -x
            #set up credentials to remote docker
            cd /tmp/
            curl -o certificates.tar https://docker:${{ secrets.STACKHERO_DOCKER_CERTIFICATES_PASSWORD }}@${{ secrets.STACKHERO_DOCKER_HOST }}/stackhero/docker/certificates.tar
            tar -xf certificates.tar
            (docker context rm -f ${{ secrets.STACKHERO_DOCKER_HOST }} 2> /dev/null || true)
            docker context create ${{ secrets.STACKHERO_DOCKER_HOST }} --description "${{ secrets.STACKHERO_DOCKER_SERVICE_ID }} (${{ secrets.STACKHERO_DOCKER_HOST }})" --docker "host=tcp://${{ secrets.STACKHERO_DOCKER_HOST }}:2376,ca=ca.pem,cert=cert.pem,key=key.pem"
            cd ${{ github.workspace }}
            docker context use ${{ secrets.STACKHERO_DOCKER_HOST }}
    
            # do a deploy
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
    
            #clean up
            docker image prune -f
        - name: Start Cron
          shell: bash
          run: |
            set -x
            docker-compose exec -T app service cron start

        - name: Run migrations
          shell: bash
          run: |
            set -x
            #create database migrations table
            docker-compose exec -T app php artisan migrate:install || true
    
            #check for migrations
            docker-compose exec -T app php artisan migrate:status
    
            #run migrations
            docker-compose exec -T app php artisan migrate --force